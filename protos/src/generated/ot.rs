// This file is generated by rust-protobuf 2.22.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `crypto/ot.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_1;

#[derive(PartialEq,Clone,Default)]
pub struct ReceiverSecret {
    // message fields
    pub scalar_a: ::std::vec::Vec<u8>,
    pub scalar_b: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReceiverSecret {
    fn default() -> &'a ReceiverSecret {
        <ReceiverSecret as ::protobuf::Message>::default_instance()
    }
}

impl ReceiverSecret {
    pub fn new() -> ReceiverSecret {
        ::std::default::Default::default()
    }

    // Bytes scalar_a = 1;
    pub fn get_scalar_a(&self) -> &[u8] {
        &self.scalar_a
    }
    pub fn clear_scalar_a(&mut self) {
        self.scalar_a.clear();
    }

    // Param is passed by value, moved
    pub fn set_scalar_a(&mut self, v: ::std::vec::Vec<u8>) {
        self.scalar_a = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scalar_a(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.scalar_a
    }

    // Take field
    pub fn take_scalar_a(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.scalar_a, ::std::vec::Vec::new())
    }

    // Bytes scalar_b = 2;


    pub fn get_scalar_b(&self) -> &[u8] {
        &self.scalar_b
    }
    pub fn clear_scalar_b(&mut self) {
        self.scalar_b.clear();
    }

    // Param is passed by value, moved
    pub fn set_scalar_b(&mut self, v: ::std::vec::Vec<u8>) {
        self.scalar_b = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scalar_b(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.scalar_b
    }

    // Take field
    pub fn take_scalar_b(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.scalar_b, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ReceiverSecret {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.scalar_a)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.scalar_b)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.scalar_a.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.scalar_a);
        }
        if !self.scalar_b.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.scalar_b);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.scalar_a.is_empty() {
            os.write_bytes(1, &self.scalar_a)?;
        }
        if !self.scalar_b.is_empty() {
            os.write_bytes(2, &self.scalar_b)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReceiverSecret {
        ReceiverSecret::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "scalar_a",
                |m: &ReceiverSecret| { &m.scalar_a },
                |m: &mut ReceiverSecret| { &mut m.scalar_a },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "scalar_b",
                |m: &ReceiverSecret| { &m.scalar_b },
                |m: &mut ReceiverSecret| { &mut m.scalar_b },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReceiverSecret>(
                "ReceiverSecret",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReceiverSecret {
        static instance: ::protobuf::rt::LazyV2<ReceiverSecret> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReceiverSecret::new)
    }
}

impl ::protobuf::Clear for ReceiverSecret {
    fn clear(&mut self) {
        self.scalar_a.clear();
        self.scalar_b.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReceiverSecret {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReceiverSecret {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReceiverPublic {
    // message fields
    pub point_x: ::std::vec::Vec<u8>,
    pub point_y: ::std::vec::Vec<u8>,
    pub point_z: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReceiverPublic {
    fn default() -> &'a ReceiverPublic {
        <ReceiverPublic as ::protobuf::Message>::default_instance()
    }
}

impl ReceiverPublic {
    pub fn new() -> ReceiverPublic {
        ::std::default::Default::default()
    }

    // bytes point_x = 1;


    pub fn get_point_x(&self) -> &[u8] {
        &self.point_x
    }
    pub fn clear_point_x(&mut self) {
        self.point_x.clear();
    }

    // Param is passed by value, moved
    pub fn set_point_x(&mut self, v: ::std::vec::Vec<u8>) {
        self.point_x = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_point_x(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.point_x
    }

    // Take field
    pub fn take_point_x(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.point_x, ::std::vec::Vec::new())
    }

    // bytes point_y = 2;


    pub fn get_point_y(&self) -> &[u8] {
        &self.point_y
    }
    pub fn clear_point_y(&mut self) {
        self.point_y.clear();
    }

    // Param is passed by value, moved
    pub fn set_point_y(&mut self, v: ::std::vec::Vec<u8>) {
        self.point_y = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_point_y(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.point_y
    }

    // Take field
    pub fn take_point_y(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.point_y, ::std::vec::Vec::new())
    }

    // bytes point_z = 3;


    pub fn get_point_z(&self) -> &[u8] {
        &self.point_z
    }
    pub fn clear_point_z(&mut self) {
        self.point_z.clear();
    }

    // Param is passed by value, moved
    pub fn set_point_z(&mut self, v: ::std::vec::Vec<u8>) {
        self.point_z = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_point_z(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.point_z
    }

    // Take field
    pub fn take_point_z(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.point_z, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ReceiverPublic {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.point_x)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.point_y)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.point_z)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.point_x.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.point_x);
        }
        if !self.point_y.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.point_y);
        }
        if !self.point_z.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.point_z);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.point_x.is_empty() {
            os.write_bytes(1, &self.point_x)?;
        }
        if !self.point_y.is_empty() {
            os.write_bytes(2, &self.point_y)?;
        }
        if !self.point_z.is_empty() {
            os.write_bytes(3, &self.point_z)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReceiverPublic {
        ReceiverPublic::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "point_x",
                |m: &ReceiverPublic| { &m.point_x },
                |m: &mut ReceiverPublic| { &mut m.point_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "point_y",
                |m: &ReceiverPublic| { &m.point_y },
                |m: &mut ReceiverPublic| { &mut m.point_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "point_z",
                |m: &ReceiverPublic| { &m.point_z },
                |m: &mut ReceiverPublic| { &mut m.point_z },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReceiverPublic>(
                "ReceiverPublic",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReceiverPublic {
        static instance: ::protobuf::rt::LazyV2<ReceiverPublic> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReceiverPublic::new)
    }
}

impl ::protobuf::Clear for ReceiverPublic {
    fn clear(&mut self) {
        self.point_x.clear();
        self.point_y.clear();
        self.point_z.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReceiverPublic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReceiverPublic {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReceiverPublicKOutOfN {
    // message fields
    pub point_x: ::std::vec::Vec<u8>,
    pub point_y: ::std::vec::Vec<u8>,
    pub point_z: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReceiverPublicKOutOfN {
    fn default() -> &'a ReceiverPublicKOutOfN {
        <ReceiverPublicKOutOfN as ::protobuf::Message>::default_instance()
    }
}

impl ReceiverPublicKOutOfN {
    pub fn new() -> ReceiverPublicKOutOfN {
        ::std::default::Default::default()
    }

    // bytes point_x = 1;


    pub fn get_point_x(&self) -> &[u8] {
        &self.point_x
    }
    pub fn clear_point_x(&mut self) {
        self.point_x.clear();
    }

    // Param is passed by value, moved
    pub fn set_point_x(&mut self, v: ::std::vec::Vec<u8>) {
        self.point_x = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_point_x(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.point_x
    }

    // Take field
    pub fn take_point_x(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.point_x, ::std::vec::Vec::new())
    }

    // bytes point_y = 2;


    pub fn get_point_y(&self) -> &[u8] {
        &self.point_y
    }
    pub fn clear_point_y(&mut self) {
        self.point_y.clear();
    }

    // Param is passed by value, moved
    pub fn set_point_y(&mut self, v: ::std::vec::Vec<u8>) {
        self.point_y = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_point_y(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.point_y
    }

    // Take field
    pub fn take_point_y(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.point_y, ::std::vec::Vec::new())
    }

    // repeated bytes point_z = 3;


    pub fn get_point_z(&self) -> &[::std::vec::Vec<u8>] {
        &self.point_z
    }
    pub fn clear_point_z(&mut self) {
        self.point_z.clear();
    }

    // Param is passed by value, moved
    pub fn set_point_z(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.point_z = v;
    }

    // Mutable pointer to the field.
    pub fn mut_point_z(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.point_z
    }

    // Take field
    pub fn take_point_z(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.point_z, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ReceiverPublicKOutOfN {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.point_x)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.point_y)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.point_z)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.point_x.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.point_x);
        }
        if !self.point_y.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.point_y);
        }
        for value in &self.point_z {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.point_x.is_empty() {
            os.write_bytes(1, &self.point_x)?;
        }
        if !self.point_y.is_empty() {
            os.write_bytes(2, &self.point_y)?;
        }
        for v in &self.point_z {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReceiverPublicKOutOfN {
        ReceiverPublicKOutOfN::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "point_x",
                |m: &ReceiverPublicKOutOfN| { &m.point_x },
                |m: &mut ReceiverPublicKOutOfN| { &mut m.point_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "point_y",
                |m: &ReceiverPublicKOutOfN| { &m.point_y },
                |m: &mut ReceiverPublicKOutOfN| { &mut m.point_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "point_z",
                |m: &ReceiverPublicKOutOfN| { &m.point_z },
                |m: &mut ReceiverPublicKOutOfN| { &mut m.point_z },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReceiverPublicKOutOfN>(
                "ReceiverPublicKOutOfN",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReceiverPublicKOutOfN {
        static instance: ::protobuf::rt::LazyV2<ReceiverPublicKOutOfN> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReceiverPublicKOutOfN::new)
    }
}

impl ::protobuf::Clear for ReceiverPublicKOutOfN {
    fn clear(&mut self) {
        self.point_x.clear();
        self.point_y.clear();
        self.point_z.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReceiverPublicKOutOfN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReceiverPublicKOutOfN {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SenderPublicPair {
    // message fields
    pub figure_print: ::std::vec::Vec<u8>,
    pub point_w: ::std::vec::Vec<u8>,
    pub encrypt_message: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SenderPublicPair {
    fn default() -> &'a SenderPublicPair {
        <SenderPublicPair as ::protobuf::Message>::default_instance()
    }
}

impl SenderPublicPair {
    pub fn new() -> SenderPublicPair {
        ::std::default::Default::default()
    }

    // bytes figure_print = 1;


    pub fn get_figure_print(&self) -> &[u8] {
        &self.figure_print
    }
    pub fn clear_figure_print(&mut self) {
        self.figure_print.clear();
    }

    // Param is passed by value, moved
    pub fn set_figure_print(&mut self, v: ::std::vec::Vec<u8>) {
        self.figure_print = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_figure_print(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.figure_print
    }

    // Take field
    pub fn take_figure_print(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.figure_print, ::std::vec::Vec::new())
    }

    // bytes point_w = 2;


    pub fn get_point_w(&self) -> &[u8] {
        &self.point_w
    }
    pub fn clear_point_w(&mut self) {
        self.point_w.clear();
    }

    // Param is passed by value, moved
    pub fn set_point_w(&mut self, v: ::std::vec::Vec<u8>) {
        self.point_w = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_point_w(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.point_w
    }

    // Take field
    pub fn take_point_w(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.point_w, ::std::vec::Vec::new())
    }

    // bytes encrypt_message = 3;


    pub fn get_encrypt_message(&self) -> &[u8] {
        &self.encrypt_message
    }
    pub fn clear_encrypt_message(&mut self) {
        self.encrypt_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_encrypt_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.encrypt_message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypt_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.encrypt_message
    }

    // Take field
    pub fn take_encrypt_message(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.encrypt_message, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SenderPublicPair {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.figure_print)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.point_w)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.encrypt_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.figure_print.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.figure_print);
        }
        if !self.point_w.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.point_w);
        }
        if !self.encrypt_message.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.encrypt_message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.figure_print.is_empty() {
            os.write_bytes(1, &self.figure_print)?;
        }
        if !self.point_w.is_empty() {
            os.write_bytes(2, &self.point_w)?;
        }
        if !self.encrypt_message.is_empty() {
            os.write_bytes(3, &self.encrypt_message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SenderPublicPair {
        SenderPublicPair::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "figure_print",
                |m: &SenderPublicPair| { &m.figure_print },
                |m: &mut SenderPublicPair| { &mut m.figure_print },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "point_w",
                |m: &SenderPublicPair| { &m.point_w },
                |m: &mut SenderPublicPair| { &mut m.point_w },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "encrypt_message",
                |m: &SenderPublicPair| { &m.encrypt_message },
                |m: &mut SenderPublicPair| { &mut m.encrypt_message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SenderPublicPair>(
                "SenderPublicPair",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SenderPublicPair {
        static instance: ::protobuf::rt::LazyV2<SenderPublicPair> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SenderPublicPair::new)
    }
}

impl ::protobuf::Clear for SenderPublicPair {
    fn clear(&mut self) {
        self.figure_print.clear();
        self.point_w.clear();
        self.encrypt_message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SenderPublicPair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SenderPublicPair {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SenderPublicPairKOutOfN {
    // message fields
    pub figure_print: ::std::vec::Vec<u8>,
    pub point_w: ::std::vec::Vec<u8>,
    pub encrypt_message: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SenderPublicPairKOutOfN {
    fn default() -> &'a SenderPublicPairKOutOfN {
        <SenderPublicPairKOutOfN as ::protobuf::Message>::default_instance()
    }
}

impl SenderPublicPairKOutOfN {
    pub fn new() -> SenderPublicPairKOutOfN {
        ::std::default::Default::default()
    }

    // bytes figure_print = 1;


    pub fn get_figure_print(&self) -> &[u8] {
        &self.figure_print
    }
    pub fn clear_figure_print(&mut self) {
        self.figure_print.clear();
    }

    // Param is passed by value, moved
    pub fn set_figure_print(&mut self, v: ::std::vec::Vec<u8>) {
        self.figure_print = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_figure_print(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.figure_print
    }

    // Take field
    pub fn take_figure_print(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.figure_print, ::std::vec::Vec::new())
    }

    // bytes point_w = 2;


    pub fn get_point_w(&self) -> &[u8] {
        &self.point_w
    }
    pub fn clear_point_w(&mut self) {
        self.point_w.clear();
    }

    // Param is passed by value, moved
    pub fn set_point_w(&mut self, v: ::std::vec::Vec<u8>) {
        self.point_w = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_point_w(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.point_w
    }

    // Take field
    pub fn take_point_w(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.point_w, ::std::vec::Vec::new())
    }

    // repeated bytes encrypt_message = 3;


    pub fn get_encrypt_message(&self) -> &[::std::vec::Vec<u8>] {
        &self.encrypt_message
    }
    pub fn clear_encrypt_message(&mut self) {
        self.encrypt_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_encrypt_message(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.encrypt_message = v;
    }

    // Mutable pointer to the field.
    pub fn mut_encrypt_message(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.encrypt_message
    }

    // Take field
    pub fn take_encrypt_message(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.encrypt_message, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SenderPublicPairKOutOfN {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.figure_print)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.point_w)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.encrypt_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.figure_print.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.figure_print);
        }
        if !self.point_w.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.point_w);
        }
        for value in &self.encrypt_message {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.figure_print.is_empty() {
            os.write_bytes(1, &self.figure_print)?;
        }
        if !self.point_w.is_empty() {
            os.write_bytes(2, &self.point_w)?;
        }
        for v in &self.encrypt_message {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SenderPublicPairKOutOfN {
        SenderPublicPairKOutOfN::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "figure_print",
                |m: &SenderPublicPairKOutOfN| { &m.figure_print },
                |m: &mut SenderPublicPairKOutOfN| { &mut m.figure_print },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "point_w",
                |m: &SenderPublicPairKOutOfN| { &m.point_w },
                |m: &mut SenderPublicPairKOutOfN| { &mut m.point_w },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "encrypt_message",
                |m: &SenderPublicPairKOutOfN| { &m.encrypt_message },
                |m: &mut SenderPublicPairKOutOfN| { &mut m.encrypt_message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SenderPublicPairKOutOfN>(
                "SenderPublicPairKOutOfN",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SenderPublicPairKOutOfN {
        static instance: ::protobuf::rt::LazyV2<SenderPublicPairKOutOfN> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SenderPublicPairKOutOfN::new)
    }
}

impl ::protobuf::Clear for SenderPublicPairKOutOfN {
    fn clear(&mut self) {
        self.figure_print.clear();
        self.point_w.clear();
        self.encrypt_message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SenderPublicPairKOutOfN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SenderPublicPairKOutOfN {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SenderPublic {
    // message fields
    pub pair: ::protobuf::RepeatedField<SenderPublicPair>,
    pub pairKN: ::protobuf::RepeatedField<SenderPublicPairKOutOfN>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SenderPublic {
    fn default() -> &'a SenderPublic {
        <SenderPublic as ::protobuf::Message>::default_instance()
    }
}

impl SenderPublic {
    pub fn new() -> SenderPublic {
        ::std::default::Default::default()
    }

    // repeated .com.webank.wedpr.crypto.proto.SenderPublicPair pair = 1;


    pub fn get_pair(&self) -> &[SenderPublicPair] {
        &self.pair
    }
    pub fn clear_pair(&mut self) {
        self.pair.clear();
    }

    // Param is passed by value, moved
    pub fn set_pair(&mut self, v: ::protobuf::RepeatedField<SenderPublicPair>) {
        self.pair = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pair(&mut self) -> &mut ::protobuf::RepeatedField<SenderPublicPair> {
        &mut self.pair
    }

    // Take field
    pub fn take_pair(&mut self) -> ::protobuf::RepeatedField<SenderPublicPair> {
        ::std::mem::replace(&mut self.pair, ::protobuf::RepeatedField::new())
    }

    // repeated .com.webank.wedpr.crypto.proto.SenderPublicPairKOutOfN pairKN = 2;


    pub fn get_pairKN(&self) -> &[SenderPublicPairKOutOfN] {
        &self.pairKN
    }
    pub fn clear_pairKN(&mut self) {
        self.pairKN.clear();
    }

    // Param is passed by value, moved
    pub fn set_pairKN(&mut self, v: ::protobuf::RepeatedField<SenderPublicPairKOutOfN>) {
        self.pairKN = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pairKN(&mut self) -> &mut ::protobuf::RepeatedField<SenderPublicPairKOutOfN> {
        &mut self.pairKN
    }

    // Take field
    pub fn take_pairKN(&mut self) -> ::protobuf::RepeatedField<SenderPublicPairKOutOfN> {
        ::std::mem::replace(&mut self.pairKN, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SenderPublic {
    fn is_initialized(&self) -> bool {
        for v in &self.pair {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pairKN {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.pair)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.pairKN)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.pair {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.pairKN {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.pair {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.pairKN {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SenderPublic {
        SenderPublic::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SenderPublicPair>>(
                "pair",
                |m: &SenderPublic| { &m.pair },
                |m: &mut SenderPublic| { &mut m.pair },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SenderPublicPairKOutOfN>>(
                "pairKN",
                |m: &SenderPublic| { &m.pairKN },
                |m: &mut SenderPublic| { &mut m.pairKN },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SenderPublic>(
                "SenderPublic",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SenderPublic {
        static instance: ::protobuf::rt::LazyV2<SenderPublic> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SenderPublic::new)
    }
}

impl ::protobuf::Clear for SenderPublic {
    fn clear(&mut self) {
        self.pair.clear();
        self.pairKN.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SenderPublic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SenderPublic {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SenderDataPair {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    pub message: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SenderDataPair {
    fn default() -> &'a SenderDataPair {
        <SenderDataPair as ::protobuf::Message>::default_instance()
    }
}

impl SenderDataPair {
    pub fn new() -> SenderDataPair {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    // bytes message = 2;


    pub fn get_message(&self) -> &[u8] {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.message, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SenderDataPair {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if !self.message.is_empty() {
            os.write_bytes(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SenderDataPair {
        SenderDataPair::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "id",
                |m: &SenderDataPair| { &m.id },
                |m: &mut SenderDataPair| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "message",
                |m: &SenderDataPair| { &m.message },
                |m: &mut SenderDataPair| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SenderDataPair>(
                "SenderDataPair",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SenderDataPair {
        static instance: ::protobuf::rt::LazyV2<SenderDataPair> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SenderDataPair::new)
    }
}

impl ::protobuf::Clear for SenderDataPair {
    fn clear(&mut self) {
        self.id.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SenderDataPair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SenderDataPair {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SenderData {
    // message fields
    pub pair: ::protobuf::RepeatedField<SenderDataPair>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SenderData {
    fn default() -> &'a SenderData {
        <SenderData as ::protobuf::Message>::default_instance()
    }
}

impl SenderData {
    pub fn new() -> SenderData {
        ::std::default::Default::default()
    }

    // repeated .com.webank.wedpr.crypto.proto.SenderDataPair pair = 1;


    pub fn get_pair(&self) -> &[SenderDataPair] {
        &self.pair
    }
    pub fn clear_pair(&mut self) {
        self.pair.clear();
    }

    // Param is passed by value, moved
    pub fn set_pair(&mut self, v: ::protobuf::RepeatedField<SenderDataPair>) {
        self.pair = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pair(&mut self) -> &mut ::protobuf::RepeatedField<SenderDataPair> {
        &mut self.pair
    }

    // Take field
    pub fn take_pair(&mut self) -> ::protobuf::RepeatedField<SenderDataPair> {
        ::std::mem::replace(&mut self.pair, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SenderData {
    fn is_initialized(&self) -> bool {
        for v in &self.pair {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.pair)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.pair {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.pair {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SenderData {
        SenderData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SenderDataPair>>(
                "pair",
                |m: &SenderData| { &m.pair },
                |m: &mut SenderData| { &mut m.pair },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SenderData>(
                "SenderData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SenderData {
        static instance: ::protobuf::rt::LazyV2<SenderData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SenderData::new)
    }
}

impl ::protobuf::Clear for SenderData {
    fn clear(&mut self) {
        self.pair.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SenderData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SenderData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IdList {
    // message fields
    pub id: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdList {
    fn default() -> &'a IdList {
        <IdList as ::protobuf::Message>::default_instance()
    }
}

impl IdList {
    pub fn new() -> IdList {
        ::std::default::Default::default()
    }

    // repeated bytes id = 1;


    pub fn get_id(&self) -> &[::std::vec::Vec<u8>] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_id(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.id, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for IdList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.id {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.id {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IdList {
        IdList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "id",
                |m: &IdList| { &m.id },
                |m: &mut IdList| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IdList>(
                "IdList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IdList {
        static instance: ::protobuf::rt::LazyV2<IdList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IdList::new)
    }
}

impl ::protobuf::Clear for IdList {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IdList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fcrypto/ot.proto\x12\x1dcom.webank.wedpr.crypto.proto\"F\n\x0eRecei\
    verSecret\x12\x19\n\x08scalar_a\x18\x01\x20\x01(\x0cR\x07scalarA\x12\x19\
    \n\x08scalar_b\x18\x02\x20\x01(\x0cR\x07scalarB\"[\n\x0eReceiverPublic\
    \x12\x17\n\x07point_x\x18\x01\x20\x01(\x0cR\x06pointX\x12\x17\n\x07point\
    _y\x18\x02\x20\x01(\x0cR\x06pointY\x12\x17\n\x07point_z\x18\x03\x20\x01(\
    \x0cR\x06pointZ\"b\n\x15ReceiverPublicKOutOfN\x12\x17\n\x07point_x\x18\
    \x01\x20\x01(\x0cR\x06pointX\x12\x17\n\x07point_y\x18\x02\x20\x01(\x0cR\
    \x06pointY\x12\x17\n\x07point_z\x18\x03\x20\x03(\x0cR\x06pointZ\"w\n\x10\
    SenderPublicPair\x12!\n\x0cfigure_print\x18\x01\x20\x01(\x0cR\x0bfigureP\
    rint\x12\x17\n\x07point_w\x18\x02\x20\x01(\x0cR\x06pointW\x12'\n\x0fencr\
    ypt_message\x18\x03\x20\x01(\x0cR\x0eencryptMessage\"~\n\x17SenderPublic\
    PairKOutOfN\x12!\n\x0cfigure_print\x18\x01\x20\x01(\x0cR\x0bfigurePrint\
    \x12\x17\n\x07point_w\x18\x02\x20\x01(\x0cR\x06pointW\x12'\n\x0fencrypt_\
    message\x18\x03\x20\x03(\x0cR\x0eencryptMessage\"\xa3\x01\n\x0cSenderPub\
    lic\x12C\n\x04pair\x18\x01\x20\x03(\x0b2/.com.webank.wedpr.crypto.proto.\
    SenderPublicPairR\x04pair\x12N\n\x06pairKN\x18\x02\x20\x03(\x0b26.com.we\
    bank.wedpr.crypto.proto.SenderPublicPairKOutOfNR\x06pairKN\":\n\x0eSende\
    rDataPair\x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\x02id\x12\x18\n\x07messa\
    ge\x18\x02\x20\x01(\x0cR\x07message\"O\n\nSenderData\x12A\n\x04pair\x18\
    \x01\x20\x03(\x0b2-.com.webank.wedpr.crypto.proto.SenderDataPairR\x04pai\
    r\"\x18\n\x06IdList\x12\x0e\n\x02id\x18\x01\x20\x03(\x0cR\x02idB!\n\x1dc\
    om.webank.wedpr.crypto.protoP\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
